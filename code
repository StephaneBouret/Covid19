CountryController.php :

    public function automaticUpload()
    {
        $path ="https://www.data.gouv.fr/fr/datasets/r/a7596877-d7c3-4da6-99c1-2f52d418e881";
        $parsedData = $this->model->parseJSONFile($path);
        $newRawData = $parsedData['countries'];
        $oldData = $this->model->getFullDataFromDBase();
        $newData = $this->model->compareFile($oldData, $newRawData);
        $dataToUpload = $this->model->addCodeAndPopulations($newData);
        $this->model->checkCountryList($dataToUpload);
        $this->model->uploadDataToDBase($dataToUpload);
        header("Location: index.php");
    }

CountryModel.php :

        /**
     * Fonction affichage de la BDD adherents
     *
     * @return void
     */
    public function getCountries(){
        $requete = "SELECT *, d.id as id_Code
        FROM daydata as d
        LEFT JOIN country as c
        ON d.code = c.code
        GROUP BY name";
        $result = $this->connexion->query($requete);
        $listCountries = $result->fetchAll(PDO::FETCH_ASSOC);
        return $listCountries;
    }

    /**
     * Fonction affichage de la BDD adherents
     *
     * @return void
     */
    public function getCountry(){
        $pays = $_GET['pays'];

        $requete = $this->connexion->prepare("SELECT *, d.id as id_Code
        FROM daydata as d
        LEFT JOIN country as c
        ON d.code = c.code
        WHERE c.name = :pays");
        $requete->bindParam(':pays', $pays);
        $result = $requete->execute();
        $country = $requete->fetchAll(PDO::FETCH_ASSOC);
        return $country;
    }
	
	public function parseJSONFile(string $file)
    {
        $string = file_get_contents($file);
        $rawData = json_decode($string);
        // var_dump($rawData);
        // Parse Country Data

        $parsedData = [];

        foreach ($rawData->PaysData as $datum) {
            $parsedData[$datum->Pays][strtotime($datum->Date)] = array(
                "infections" => $datum->Infection,
                "deces" => $datum->Deces,
                "guerisons" => $datum->Guerisons
            );
        };

        // $parsedGlobalData = [];

        // foreach ($rawData->GlobalData as $dayData) {
        //     $parsedGlobalData[strtotime($dayData->Date)] = array(
        //         "infected" => $dayData->Infection,
        //         "deaths" => $dayData->Deces,
        //         "recovered" => $dayData->Guerisons
        //     );
        // }
        // $results = array(
        //     "countries" => $parsedData,
        //     "global" => $parsedGlobalData
        // );
        return $parsedData;
    }

    public function getFullDataFromDBase()
    {
        $sql = "SELECT country.name, country.population, daydata.*
        FROM daydata JOIN country 
        ON country.code = daydata.code";
        $request = $this->connexion->prepare($sql);
        $result = $request->execute();
        $data = $request->fetchAll(PDO::FETCH_ASSOC);

        $parsedData = [];

        foreach ($data as $datum) {
            $parsedData[$datum['name']]['population'] = $datum['population'];
            $parsedData[$datum['name']]['code'] = $datum['code'];
            $parsedData[$datum['name']]['data'][$datum['Date']] = array(
                "infected" => $datum['Infections'],
                "death" => $datum['Deces'],
                "recovered" => $datum['Guerisons']
            );
        }
        // var_dump($data);
        return $parsedData;
    }

    public function compareFile($oldData, $newData)
    {
        $filteredData = [];
        // var_dump($newData);
        foreach ($newData as $newCountryName => $newValue) {
            // var_dump(array_keys($oldData));
            // var_dump($newCountryName);
            if (!in_array($newCountryName, array_keys($oldData))) {
                $filteredData[$newCountryName] = [];
                foreach ($newValue as $time => $data) {
                    $filteredData[$newCountryName][$time] = $data;
                }
            } else {
                foreach ($newValue as $time => $data) {
                    if (!in_array($time, array_keys($oldData[$newCountryName]['data']))) {
                        $filteredData[$newCountryName][$time] = $data;
                    }
                }
            }
        }
        // var_dump(count($filteredData));
        return $filteredData;
    }

    public function addCodeAndPopulations($data)
    {
        $filePath = 'country_data.json';
        $string = file_get_contents($filePath);
        $rawData = json_decode($string);

        $updatedData = [];

        foreach ($data as $countryName => $countryData) {
            $hasMatched = False;
            foreach ($rawData as $isoCode => $values) {
                if (strtolower($countryName) == strtolower($values->Frenchname)) {
                    $updatedData[$isoCode]['Name'] = $countryName;
                    $updatedData[$isoCode]['Population'] = $values->Population;
                    $updatedData[$isoCode]['data'] = $countryData;
                    $hasMatched = TRUE;
                    break;
                }
            }
            if (!$hasMatched) {
                // var_dump("Error at:".$countryName );
            }
        }
        return $updatedData;
    }

    public function checkCountryList($data)
    {
        $request = $this->connexion->prepare("SELECT * FROM country");
        $result = $request->execute();
        $countriesInDB = $request->fetchAll(PDO::FETCH_ASSOC);

        $countryToCreate = [];

        foreach ($data as $countryCode => $values) {
            $hasMatched = FALSE;
            foreach ($countriesInDB as $existingCountry) {
                if ($existingCountry['code'] == $countryCode) {
                    $hasMatched = true;
                    break;
                }
            }

            if (!$hasMatched) {
                $countryToCreate[$countryCode] = array(
                    'Name' => $values['Name'],
                    'Population' => $values['Population']
                    // 'Data' => $values['data']
                );
            }
        }

        if (!empty($countryToCreate)) {
            // Create to DB;
            $this->connexion->beginTransaction();
            foreach ($countryToCreate as $countryCode => $values) {
                $request = $this->connexion->prepare("INSERT INTO `country` (`code`, `population`, `name`) VALUES (:code, :population, :name)");
                $request->bindParam(':code', $countryCode);
                $request->bindParam(':population', $values['Population']);
                $request->bindParam(':name', $values['Name']);
                $request->execute();
            }
            $this->connexion->commit();
        }
        // var_dump("Added Country: ");
        // var_dump(count($countryToCreate));
    }

    public function uploadDataToDBase($data)
    {
        // var_dump($data['AE']);
        $this->connexion->beginTransaction();
        foreach ($data as $countryCode => $values) {
            foreach ($values['data'] as $time => $dayValues) {
                $request = $this->connexion->prepare("INSERT INTO `daydata` (`id`, `Date`, `Infections`, `Deces`, `Guerisons`, `code`) 
                                                        VALUES (null, :date, :infected, :death, :recovered, :code)");
                $request->bindParam(':death', $dayValues['deces']);
                $request->bindParam(':infected', $dayValues['infections']);
                $request->bindParam(':recovered', $dayValues['guerisons']);
                $request->bindParam(':date', $time);
                $request->bindParam(':code', $countryCode);
                $request->execute();
                // var_dump($request->errorInfo());
            }
        }
        $this->connexion->commit();
    }
